// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PERSONAL
  DEPARTMENT_HEAD
  DIRECTOR
  ADMIN
}

enum Department {
  INFORMATIQUE
  CIVIL
  ELECTRICITE
  MECANIQUE
  GESTION
  NO
}

model User {
  id            String      @id
  email         String      @unique
  name          String?
  emailVerified Boolean
  role          Role?       @default(PERSONAL)
  department    Department? @default(NO)
  image         String?
  background    String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

/// Modèle représentant une page ou un module de l'application
model Page {
  id             String       @id @default(uuid())
  name           String       @unique // une clé logique, ex: "dashboard", "users", "reports"
  label          String? // Libellé affiché, ex: "Tableau de bord"
  route          String? // La route de la page, ex: "/dashboard"
  accessControls PageAccess[]

  // Tu peux ajouter d'autres champs (description, icône, etc.)
}

/// Modèle qui associe une page et un rôle pour définir si l'accès est autorisé
model PageAccess {
  id      String  @id @default(uuid())
  page    Page    @relation(fields: [pageId], references: [id])
  pageId  String
  role    Role // Réutilisation de l'enum Role
  allowed Boolean @default(false)

  @@unique([pageId, role])
}
